{"ast":null,"code":"var _jsxFileName = \"E:\\\\Workspace\\\\ReactJS\\\\whowantstobeamillionaire\\\\src\\\\App.js\";\nimport React from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      gameState: 0,\n      // 0 =  not started, 1 = started, 2 = ended\n      round: 0,\n      question: \"\",\n      rightAnswer: \"\",\n      answers: [],\n      rightAnswerIndex: 999,\n      selectedAnswer: 999,\n      isAnswerSelected: false,\n      difficulty: \"\",\n      category: \"\",\n      jokerInfo: [\"A\", \"B\", \"C\", \"D\"],\n      jokerAvailable: [false, false, false]\n    };\n    this.startGame = this.startGame.bind(this);\n    this.nextQuestion = this.nextQuestion.bind(this);\n    this.shuffleQuestions = this.shuffleQuestions.bind(this);\n  } // end constructor()\n\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, React.createElement(\"header\", {\n      className: \"App-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, \"Who Wants to Be a Millionaire?\", React.createElement(\"img\", {\n      src: logo,\n      className: \"App-logo\",\n      alt: \"logo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    })), this.state.gameState !== 1 ? React.createElement(\"button\", {\n      onClick: this.startGame,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, \"NEW GAME\") : this.props.textOrHtml, this.state.gameState !== 0 ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, \"Category: \", this.state.category, \" (\", this.state.difficulty, \")\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }), this.state.question, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, \"A) \", this.state.answers[0]), React.createElement(\"button\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, \"B) \", this.state.answers[1]), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, \"C) \", this.state.answers[2]), React.createElement(\"button\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, \"D) \", this.state.answers[3]), this.state.gameState === 1 && this.state.round <= 15 && this.state.isAnswerSelected ? React.createElement(\"button\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, \"Next Question\") : this.props.textOrHtml) : this.props.textOrHtml);\n  } // end render()\n\n\n  startGame() {\n    this.setState({\n      gameState: 1,\n      // started\n      jokerAvailable: [false, false, false]\n    });\n    this.nextQuestion();\n  } // end startGame()\n\n\n  nextQuestion() {\n    let round = this.state.round;\n    let apiURL = \"\";\n\n    if (round < 5) {\n      apiURL = \"https://opentdb.com/api.php?amount=1&difficulty=easy&type=multiple\";\n    } else if (round < 10) {\n      apiURL = \"https://opentdb.com/api.php?amount=1&difficulty=medium&type=multiple\";\n    } else {\n      apiURL = \"https://opentdb.com/api.php?amount=1&difficulty=hard&type=multiple\";\n    }\n\n    fetch(apiURL).then(response => response.json()).then(data => this.setState({\n      rightAnswer: data.results[0].correct_answer,\n      answers: data.results[0].incorrect_answers,\n      question: data.results[0].question,\n      difficulty: data.results[0].difficulty,\n      category: data.results[0].category,\n      rightAnswerIndex: 999,\n      selectedAnswer: 999,\n      isAnswerSelected: false\n    })).then(this.shuffleQuestions);\n  } // end nextQuestion()\n\n\n  shuffleQuestions() {\n    const randomNumber = Math.floor(Math.random() * 4) + 1;\n    let shuffledAnswers = this.state.answers;\n    shuffledAnswers.splice(randomNumber - 1, 0, this.state.rightAnswer);\n    this.setState({\n      rightAnswerIndex: randomNumber - 1,\n      answers: shuffledAnswers\n    });\n    console.log(\"Right answer: \" + this.state.rightAnswer + \"\\nOn Index: \" + this.state.rightAnswerIndex);\n  } // end shuffleQuestions()\n\n\n} // end App{}\n\n\nexport default App;","map":{"version":3,"sources":["E:\\Workspace\\ReactJS\\whowantstobeamillionaire\\src\\App.js"],"names":["React","App","Component","constructor","state","gameState","round","question","rightAnswer","answers","rightAnswerIndex","selectedAnswer","isAnswerSelected","difficulty","category","jokerInfo","jokerAvailable","startGame","bind","nextQuestion","shuffleQuestions","render","logo","props","textOrHtml","setState","apiURL","fetch","then","response","json","data","results","correct_answer","incorrect_answers","randomNumber","Math","floor","random","shuffledAnswers","splice","console","log"],"mappings":"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","sourcesContent":["import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends React.Component {\n\n  constructor(){\n    super()\n    this.state = {\n      gameState: 0, // 0 =  not started, 1 = started, 2 = ended\n      round: 0,\n      question: \"\",\n      rightAnswer: \"\",\n      answers: [],\n      rightAnswerIndex: 999,\n      selectedAnswer: 999,\n      isAnswerSelected: false,\n      difficulty: \"\",\n      category: \"\",\n      jokerInfo: [\"A\", \"B\", \"C\", \"D\"],\n      jokerAvailable: [false, false, false]\n    }\n\n    this.startGame = this.startGame.bind(this)\n    this.nextQuestion = this.nextQuestion.bind(this)\n    this.shuffleQuestions = this.shuffleQuestions.bind(this)\n  } // end constructor()\n\n  render(){\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          Who Wants to Be a Millionaire?\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        </header>\n  \n        {\n          this.state.gameState !== 1 ? <button onClick={this.startGame}>NEW GAME</button> : this.props.textOrHtml\n        }\n\n        {\n          this.state.gameState !== 0 ?\n          <div>\n\n            Category: {this.state.category} ({this.state.difficulty})\n            <br/>\n            {this.state.question}\n            <br/>\n            <br/>\n\n            <button>A) {this.state.answers[0]}</button>\n            <button>B) {this.state.answers[1]}</button>\n            <br/>\n            <button>C) {this.state.answers[2]}</button>\n            <button>D) {this.state.answers[3]}</button>\n\n            {\n              this.state.gameState === 1 && this.state.round <= 15 && this.state.isAnswerSelected\n              ?\n              <button>Next Question</button>\n              :\n              this.props.textOrHtml\n            }\n\n          </div>\n          :\n          this.props.textOrHtml\n        }\n  \n      </div>\n    )\n  } // end render()\n\n  startGame(){\n    this.setState({\n      gameState: 1, // started\n      jokerAvailable: [false, false, false]\n    })\n\n    this.nextQuestion()\n  } // end startGame()\n\n  nextQuestion(){\n    let round = this.state.round\n    let apiURL = \"\"\n    if(round < 5) {\n      apiURL = \"https://opentdb.com/api.php?amount=1&difficulty=easy&type=multiple\"\n    } else if(round < 10) {\n      apiURL = \"https://opentdb.com/api.php?amount=1&difficulty=medium&type=multiple\"\n    } else {\n      apiURL = \"https://opentdb.com/api.php?amount=1&difficulty=hard&type=multiple\"\n    }\n\n    fetch(apiURL)\n      .then(response => response.json())\n      .then(data => this.setState({\n        rightAnswer: data.results[0].correct_answer,\n        answers: data.results[0].incorrect_answers,\n        question: data.results[0].question,\n        difficulty: data.results[0].difficulty,\n        category: data.results[0].category,\n        rightAnswerIndex: 999,\n        selectedAnswer: 999,\n        isAnswerSelected: false\n      }))\n      .then(this.shuffleQuestions)\n  } // end nextQuestion()\n  \n  shuffleQuestions(){\n    const randomNumber = Math.floor(Math.random() * 4) + 1\n    let shuffledAnswers = this.state.answers\n    shuffledAnswers.splice(randomNumber-1, 0, this.state.rightAnswer)\n    this.setState({\n      rightAnswerIndex: randomNumber-1,\n      answers: shuffledAnswers\n    })\n    console.log(\"Right answer: \" + this.state.rightAnswer + \"\\nOn Index: \" + this.state.rightAnswerIndex)\n  } // end shuffleQuestions()\n\n} // end App{}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}